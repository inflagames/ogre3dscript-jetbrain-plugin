// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Material.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.*;

import static org.intellij.sdk.language.psi.MaterialElementTypes.*;
import static com.ogre.scriptlsp.lang.parser.MaterialParserDefinition.*;


public class _MaterialLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\16\0\6\1\1\4"+
    "\1\1\1\5\5\1\1\6\1\1\1\7\1\10\1\11"+
    "\1\12\12\13\1\14\6\1\32\15\1\1\1\16\2\1"+
    "\1\17\1\1\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\15\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\15\1\47\1\1\1\50\1\1\6\0"+
    "\1\51\32\0\2\1\4\15\4\1\1\15\2\1\1\0"+
    "\7\1\1\15\4\1\1\15\5\1\27\15\1\1\37\15"+
    "\1\1\u01ca\15\4\1\14\15\16\1\5\15\7\1\1\15"+
    "\1\1\1\15\21\1\160\0\5\15\1\1\2\15\2\1"+
    "\4\15\1\1\1\15\6\1\1\15\1\1\3\15\1\1"+
    "\1\15\1\1\24\15\1\1\123\15\1\1\213\15\1\1"+
    "\5\0\2\1\246\15\1\1\46\15\2\1\1\15\6\1"+
    "\51\15\6\1\1\15\1\1\55\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\0\10\1\33\15\4\1"+
    "\4\15\15\1\6\0\5\1\1\15\4\1\13\0\1\1"+
    "\1\0\3\1\53\15\25\0\12\13\4\1\2\15\1\0"+
    "\143\15\1\1\1\15\10\0\1\1\6\0\2\15\2\0"+
    "\1\1\4\0\2\15\12\13\3\15\2\1\1\15\17\1"+
    "\1\0\1\15\1\0\36\15\33\0\2\1\131\15\13\0"+
    "\1\15\16\1\12\13\41\15\11\0\2\15\4\1\1\15"+
    "\2\1\1\0\30\15\4\0\1\15\11\0\1\15\3\0"+
    "\1\15\5\0\22\1\31\15\3\0\4\1\13\15\65\1"+
    "\25\15\1\1\22\15\13\1\61\0\66\15\3\0\1\15"+
    "\22\0\1\15\7\0\12\15\2\0\2\1\12\13\1\1"+
    "\20\15\3\0\1\1\10\15\2\1\2\15\2\1\26\15"+
    "\1\1\7\15\1\1\1\15\3\1\4\15\2\1\1\0"+
    "\1\15\7\0\2\1\2\0\2\1\3\0\1\15\10\1"+
    "\1\0\4\1\2\15\1\1\3\15\2\0\2\1\12\13"+
    "\4\15\7\1\2\15\1\1\1\0\2\1\3\0\1\1"+
    "\6\15\4\1\2\15\2\1\26\15\1\1\7\15\1\1"+
    "\2\15\1\1\2\15\1\1\2\15\2\1\1\0\1\1"+
    "\5\0\4\1\2\0\2\1\3\0\3\1\1\0\7\1"+
    "\4\15\1\1\1\15\7\1\12\13\2\0\3\15\1\0"+
    "\13\1\3\0\1\1\11\15\1\1\3\15\1\1\26\15"+
    "\1\1\7\15\1\1\2\15\1\1\5\15\2\1\1\0"+
    "\1\15\10\0\1\1\3\0\1\1\3\0\2\1\1\15"+
    "\17\1\2\15\2\0\2\1\12\13\1\1\1\15\7\1"+
    "\1\15\6\0\1\1\3\0\1\1\10\15\2\1\2\15"+
    "\2\1\26\15\1\1\7\15\1\1\2\15\1\1\5\15"+
    "\2\1\1\0\1\15\7\0\2\1\2\0\2\1\3\0"+
    "\7\1\3\0\4\1\2\15\1\1\3\15\2\0\2\1"+
    "\12\13\1\1\1\15\20\1\1\0\1\15\1\1\6\15"+
    "\3\1\3\15\1\1\4\15\3\1\2\15\1\1\1\15"+
    "\1\1\2\15\3\1\2\15\3\1\3\15\3\1\14\15"+
    "\4\1\5\0\3\1\3\0\1\1\4\0\2\1\1\15"+
    "\6\1\1\0\16\1\12\13\11\1\1\15\6\1\5\0"+
    "\10\15\1\1\3\15\1\1\27\15\1\1\20\15\3\1"+
    "\1\15\7\0\1\1\3\0\1\1\4\0\7\1\2\0"+
    "\1\1\3\15\5\1\2\15\2\0\2\1\12\13\20\1"+
    "\1\15\3\0\1\1\10\15\1\1\3\15\1\1\27\15"+
    "\1\1\12\15\1\1\5\15\2\1\1\0\1\15\7\0"+
    "\1\1\3\0\1\1\4\0\7\1\2\0\7\1\1\15"+
    "\1\1\2\15\2\0\2\1\12\13\1\1\2\15\15\1"+
    "\4\0\11\15\1\1\3\15\1\1\51\15\2\0\1\15"+
    "\7\0\1\1\3\0\1\1\4\0\1\15\5\1\3\15"+
    "\1\0\7\1\3\15\2\0\2\1\12\13\12\1\6\15"+
    "\1\1\3\0\1\1\22\15\3\1\30\15\1\1\11\15"+
    "\1\1\1\15\2\1\7\15\3\1\1\0\4\1\6\0"+
    "\1\1\1\0\1\1\10\0\6\1\12\13\2\1\2\0"+
    "\15\1\60\15\1\0\2\15\7\0\4\1\10\15\10\0"+
    "\1\1\12\13\47\1\2\15\1\1\1\15\1\1\5\15"+
    "\1\1\30\15\1\1\1\15\1\1\12\15\1\0\2\15"+
    "\11\0\1\15\2\1\5\15\1\1\1\15\1\1\6\0"+
    "\2\1\12\13\2\1\4\15\40\1\1\15\27\1\2\0"+
    "\6\1\12\13\13\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\2\0\10\15\1\1\44\15\4\1\24\0\1\1"+
    "\2\0\5\15\13\0\1\1\44\0\11\1\1\0\71\1"+
    "\53\15\24\0\1\15\12\13\6\1\6\15\4\0\4\15"+
    "\3\0\1\15\3\0\2\15\7\0\3\15\4\0\15\15"+
    "\14\0\1\15\1\0\12\13\4\0\2\1\46\15\1\1"+
    "\1\15\5\1\1\15\2\1\53\15\1\1\115\15\1\1"+
    "\4\15\2\1\7\15\1\1\1\15\1\1\4\15\2\1"+
    "\51\15\1\1\4\15\2\1\41\15\1\1\4\15\2\1"+
    "\7\15\1\1\1\15\1\1\4\15\2\1\17\15\1\1"+
    "\71\15\1\1\4\15\2\1\103\15\2\1\3\0\40\1"+
    "\20\15\20\1\126\15\2\1\6\15\3\1\u016c\15\2\1"+
    "\21\15\1\1\32\15\5\1\113\15\3\1\13\15\7\1"+
    "\15\15\1\1\4\15\3\0\13\1\22\15\3\0\13\1"+
    "\22\15\2\0\14\1\15\15\1\1\3\15\1\1\2\0"+
    "\14\1\64\15\40\0\3\1\1\15\3\1\2\15\1\0"+
    "\2\1\12\13\41\1\4\0\1\1\12\13\6\1\131\15"+
    "\7\1\5\15\2\0\42\15\1\0\1\15\5\1\106\15"+
    "\12\1\37\15\1\1\14\0\4\1\14\0\12\1\12\13"+
    "\36\15\2\1\5\15\13\1\54\15\4\1\32\15\6\1"+
    "\12\13\46\1\27\15\5\0\4\1\65\15\12\0\1\1"+
    "\35\0\2\1\1\0\12\13\6\1\12\13\15\1\1\15"+
    "\10\1\16\0\1\1\2\0\77\1\5\0\57\15\21\0"+
    "\7\15\4\1\12\13\21\1\11\0\14\1\3\0\36\15"+
    "\15\0\2\15\12\13\54\15\16\0\14\1\44\15\24\0"+
    "\10\1\12\13\3\1\3\15\12\13\44\15\2\1\11\15"+
    "\7\1\53\15\2\1\3\15\20\1\3\0\1\1\25\0"+
    "\4\15\1\0\6\15\1\0\2\15\3\0\1\15\5\1"+
    "\300\15\72\0\1\1\5\0\26\15\2\1\6\15\2\1"+
    "\46\15\2\1\6\15\2\1\10\15\1\1\1\15\1\1"+
    "\1\15\1\1\1\15\1\1\37\15\2\1\65\15\1\1"+
    "\7\15\1\1\1\15\3\1\3\15\1\1\7\15\3\1"+
    "\4\15\2\1\6\15\4\1\15\15\5\1\3\15\1\1"+
    "\7\15\16\1\5\0\30\1\2\3\5\0\20\1\2\15"+
    "\23\1\1\15\13\1\5\0\1\1\12\0\1\1\1\15"+
    "\15\1\1\15\20\1\15\15\3\1\40\15\20\1\15\0"+
    "\4\1\1\0\3\1\14\0\21\1\1\15\4\1\1\15"+
    "\2\1\12\15\1\1\1\15\3\1\5\15\6\1\1\15"+
    "\1\1\1\15\1\1\1\15\1\1\4\15\1\1\13\15"+
    "\2\1\4\15\5\1\5\15\4\1\1\15\21\1\51\15"+
    "\u0177\1\57\15\1\1\57\15\1\1\205\15\6\1\4\15"+
    "\3\0\2\15\14\1\46\15\1\1\1\15\5\1\1\15"+
    "\2\1\70\15\7\1\1\15\17\1\1\0\27\15\11\1"+
    "\7\15\1\1\7\15\1\1\7\15\1\1\7\15\1\1"+
    "\7\15\1\1\7\15\1\1\7\15\1\1\7\15\1\1"+
    "\40\0\57\1\1\15\325\1\3\15\31\1\11\15\6\0"+
    "\1\1\5\15\2\1\5\15\4\1\126\15\2\1\2\0"+
    "\2\1\3\15\1\1\132\15\1\1\4\15\5\1\53\15"+
    "\1\1\136\15\21\1\40\15\60\1\320\15\100\1\375\15"+
    "\3\1\215\15\103\1\56\15\2\1\15\15\3\1\20\15"+
    "\12\13\2\15\24\1\57\15\1\0\4\1\12\0\1\1"+
    "\37\15\2\0\120\15\2\0\45\1\11\15\2\1\147\15"+
    "\2\1\65\15\2\1\11\15\52\1\15\15\1\0\3\15"+
    "\1\0\4\15\1\0\27\15\5\0\4\1\1\0\13\1"+
    "\1\15\7\1\64\15\14\1\2\0\62\15\22\0\12\1"+
    "\12\13\6\1\22\0\6\15\3\1\1\15\1\1\2\15"+
    "\1\0\12\13\34\15\10\0\2\1\27\15\15\0\14\1"+
    "\35\15\3\1\4\0\57\15\16\0\16\1\1\15\12\13"+
    "\6\1\5\15\1\0\12\15\12\13\5\15\1\1\51\15"+
    "\16\0\11\1\3\15\1\0\10\15\2\0\2\1\12\13"+
    "\6\1\27\15\3\1\1\15\3\0\62\15\1\0\1\15"+
    "\3\0\2\15\2\0\5\15\2\0\1\15\1\0\1\15"+
    "\30\1\3\15\2\1\13\15\5\0\2\1\3\15\2\0"+
    "\12\1\6\15\2\1\6\15\2\1\6\15\11\1\7\15"+
    "\1\1\7\15\1\1\53\15\1\1\16\15\6\1\163\15"+
    "\10\0\1\1\2\0\2\1\12\13\6\1\244\15\14\1"+
    "\27\15\4\1\61\15\4\1\u0100\3\156\15\2\1\152\15"+
    "\46\1\7\15\14\1\5\15\5\1\1\15\1\0\12\15"+
    "\1\1\15\15\1\1\5\15\1\1\1\15\1\1\2\15"+
    "\1\1\2\15\1\1\154\15\41\1\153\15\22\1\100\15"+
    "\2\1\66\15\50\1\15\15\3\1\20\0\20\1\20\0"+
    "\3\1\2\15\30\1\3\15\31\1\1\15\6\1\5\15"+
    "\1\1\207\15\2\1\1\0\4\1\1\15\13\1\12\13"+
    "\7\1\32\15\4\1\1\15\1\1\32\15\13\1\131\15"+
    "\3\1\6\15\2\1\6\15\2\1\6\15\2\1\3\15"+
    "\3\1\2\15\3\1\2\15\22\1\3\0\4\1\14\15"+
    "\1\1\32\15\1\1\23\15\1\1\2\15\1\1\17\15"+
    "\2\1\16\15\42\1\173\15\105\1\65\15\210\1\1\0"+
    "\202\1\35\15\3\1\61\15\17\1\1\0\37\1\40\15"+
    "\15\1\36\15\5\1\46\15\5\0\5\1\36\15\2\1"+
    "\44\15\4\1\10\15\1\1\5\15\52\1\236\15\2\1"+
    "\12\13\6\1\44\15\4\1\44\15\4\1\50\15\10\1"+
    "\64\15\234\1\67\15\11\1\26\15\12\1\10\15\230\1"+
    "\6\15\2\1\1\15\1\1\54\15\1\1\2\15\3\1"+
    "\1\15\2\1\27\15\12\1\27\15\11\1\37\15\101\1"+
    "\23\15\1\1\2\15\12\1\26\15\12\1\32\15\106\1"+
    "\70\15\6\1\2\15\100\1\1\15\3\0\1\1\2\0"+
    "\5\1\4\0\4\15\1\1\3\15\1\1\35\15\2\1"+
    "\3\0\4\1\1\0\40\1\35\15\3\1\35\15\43\1"+
    "\10\15\1\1\34\15\2\0\31\1\66\15\12\1\26\15"+
    "\12\1\23\15\15\1\22\15\156\1\111\15\67\1\63\15"+
    "\15\1\63\15\15\1\44\15\4\0\10\1\12\13\u0146\1"+
    "\52\15\1\1\2\0\3\1\2\15\116\1\35\15\12\1"+
    "\1\15\10\1\26\15\13\0\137\1\25\15\33\1\27\15"+
    "\11\1\3\0\65\15\17\0\37\1\12\13\17\1\4\0"+
    "\55\15\13\0\2\1\1\0\17\1\1\0\2\1\31\15"+
    "\7\1\12\13\6\1\3\0\44\15\16\0\1\1\12\13"+
    "\4\1\1\15\2\0\1\15\10\1\43\15\1\0\2\1"+
    "\1\15\11\1\3\0\60\15\16\0\4\15\4\1\4\0"+
    "\1\1\2\0\12\13\1\15\1\1\1\15\43\1\22\15"+
    "\1\1\31\15\14\0\6\1\1\0\101\1\7\15\1\1"+
    "\1\15\1\1\4\15\1\1\17\15\1\1\12\15\7\1"+
    "\57\15\14\0\5\1\12\13\6\1\4\0\1\1\10\15"+
    "\2\1\2\15\2\1\26\15\1\1\7\15\1\1\2\15"+
    "\1\1\5\15\1\1\2\0\1\15\7\0\2\1\2\0"+
    "\2\1\3\0\2\1\1\15\6\1\1\0\5\1\5\15"+
    "\2\0\2\1\7\0\3\1\5\0\213\1\65\15\22\0"+
    "\4\15\5\1\12\13\4\1\1\0\3\15\36\1\60\15"+
    "\24\0\2\15\1\1\1\15\10\1\12\13\246\1\57\15"+
    "\7\0\2\1\11\0\27\1\4\15\2\0\42\1\60\15"+
    "\21\0\3\1\1\15\13\1\12\13\46\1\53\15\15\0"+
    "\1\15\7\1\12\13\66\1\33\15\2\1\17\0\4\1"+
    "\12\13\306\1\54\15\17\0\145\1\100\15\12\13\25\1"+
    "\10\15\2\1\1\15\2\1\10\15\1\1\2\15\1\1"+
    "\30\15\6\0\1\1\2\0\2\1\4\0\1\15\1\0"+
    "\1\15\2\0\14\1\12\0\106\1\10\15\2\1\47\15"+
    "\7\0\2\1\7\0\1\15\1\1\1\15\1\0\33\1"+
    "\1\15\12\0\50\15\7\0\1\15\4\0\10\1\1\0"+
    "\10\1\1\15\13\0\56\15\20\0\3\1\1\15\42\1"+
    "\71\15\7\1\11\15\1\1\45\15\10\0\1\1\10\0"+
    "\1\15\17\1\12\13\30\1\36\15\2\1\26\0\1\1"+
    "\16\0\111\1\7\15\1\1\2\15\1\1\46\15\6\0"+
    "\3\1\1\0\1\1\2\0\1\1\7\0\1\15\1\0"+
    "\10\1\12\13\6\1\6\15\1\1\2\15\1\1\40\15"+
    "\5\0\1\1\2\0\1\1\5\0\1\15\7\1\12\13"+
    "\u0136\1\23\15\4\0\271\1\1\15\54\1\4\15\37\1"+
    "\232\15\146\1\157\15\21\1\304\15\274\1\57\15\1\1"+
    "\11\0\307\1\107\15\271\1\71\15\7\1\37\15\1\1"+
    "\12\13\146\1\36\15\2\1\5\0\13\1\60\15\7\0"+
    "\11\1\4\15\14\1\12\13\11\1\25\15\5\1\23\15"+
    "\260\1\100\15\200\1\113\15\4\1\1\0\1\15\67\0"+
    "\7\1\4\0\15\15\100\1\2\15\1\1\1\15\1\0"+
    "\13\1\2\0\16\1\370\15\10\1\326\15\52\1\11\15"+
    "\367\1\37\15\61\1\3\15\21\1\4\15\10\1\u018c\15"+
    "\4\1\153\15\5\1\15\15\3\1\11\15\7\1\12\15"+
    "\3\1\2\0\1\1\4\0\301\1\5\0\3\1\26\0"+
    "\2\1\7\0\36\1\4\0\224\1\3\0\273\1\125\15"+
    "\1\1\107\15\1\1\2\15\2\1\1\15\2\1\2\15"+
    "\2\1\4\15\1\1\14\15\1\1\1\15\1\1\7\15"+
    "\1\1\101\15\1\1\4\15\2\1\10\15\1\1\7\15"+
    "\1\1\34\15\1\1\4\15\1\1\5\15\1\1\1\15"+
    "\3\1\7\15\1\1\u0154\15\2\1\31\15\1\1\31\15"+
    "\1\1\37\15\1\1\31\15\1\1\37\15\1\1\31\15"+
    "\1\1\37\15\1\1\31\15\1\1\37\15\1\1\31\15"+
    "\1\1\10\15\2\1\62\13\67\0\4\1\62\0\10\1"+
    "\1\0\16\1\1\0\26\1\5\0\1\1\17\0\120\1"+
    "\7\0\1\1\21\0\2\1\7\0\1\1\2\0\1\1"+
    "\5\0\325\1\55\15\3\1\7\0\7\15\2\1\12\13"+
    "\4\1\1\15\u0171\1\54\15\4\0\12\13\5\1\306\15"+
    "\13\1\7\0\51\1\104\15\7\0\1\15\4\1\12\13"+
    "\u0156\1\1\15\117\1\4\15\1\1\33\15\1\1\2\15"+
    "\1\1\1\15\2\1\1\15\1\1\12\15\1\1\4\15"+
    "\1\1\1\15\1\1\1\15\6\1\1\15\4\1\1\15"+
    "\1\1\1\15\1\1\1\15\1\1\3\15\1\1\2\15"+
    "\1\1\1\15\2\1\1\15\1\1\1\15\1\1\1\15"+
    "\1\1\1\15\1\1\1\15\1\1\2\15\1\1\1\15"+
    "\2\1\4\15\1\1\7\15\1\1\4\15\1\1\4\15"+
    "\1\1\1\15\1\1\12\15\1\1\21\15\5\1\3\15"+
    "\1\1\5\15\1\1\21\15\u0134\1\12\0\6\1\336\15"+
    "\42\1\65\15\13\1\336\15\2\1\u0182\15\16\1\u0131\15"+
    "\37\1\36\15\342\1\113\15\266\1\1\0\36\1\140\0"+
    "\200\1\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\14\1\1\7\1\10\1\11\1\2\1\0\1\12"+
    "\1\13\1\0\1\5\1\0\1\14\17\0\1\5\20\0"+
    "\1\15\4\0\1\16\3\0\1\17\34\0\1\20\20\0"+
    "\1\21\6\0\1\22\3\0\1\23\21\0\1\24\24\0"+
    "\1\25\20\0\1\26\7\0\1\27\4\0\1\30\7\0"+
    "\1\31\1\32\1\33\1\0\1\34\6\0\1\35\11\0"+
    "\1\36\6\0\1\33\3\0\1\37\4\0\1\40\2\0"+
    "\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\124\0\374"+
    "\0\u0126\0\u0150\0\124\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\124"+
    "\0\124\0\u0372\0\124\0\u039c\0\u03c6\0\322\0\u03f0\0\u041a"+
    "\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba"+
    "\0\u06e4\0\u0498\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0"+
    "\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930"+
    "\0\u095a\0\u0984\0\u0444\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\124"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\124\0\u0ad4\0\u0afe\0\u0b28\0\u0b52"+
    "\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2"+
    "\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42"+
    "\0\124\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068"+
    "\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8"+
    "\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308"+
    "\0\124\0\u1332\0\u135c\0\u1386\0\124\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554"+
    "\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\124\0\u167a"+
    "\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca"+
    "\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a"+
    "\0\u1944\0\u196e\0\u1998\0\124\0\u19c2\0\u19ec\0\u1a16\0\u1a40"+
    "\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90"+
    "\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\124\0\u1c62\0\u1c8c\0\u1cb6"+
    "\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06"+
    "\0\u1e30\0\124\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c"+
    "\0\u1f56\0\124\0\u1f80\0\u1f80\0\u1faa\0\124\0\u1fd4\0\u1ffe"+
    "\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\124\0\u2274"+
    "\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\124\0\u2370\0\u239a"+
    "\0\u23c4\0\124\0\u23ee\0\u2418\0\u2442\0\u246c\0\124\0\u2496"+
    "\0\u24c0\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\2\1\3\1\2\1\14\1\2"+
    "\1\15\1\16\1\2\1\17\1\20\1\2\1\21\1\2"+
    "\1\22\2\2\1\23\1\2\1\24\1\25\1\26\1\2"+
    "\1\27\3\2\1\30\1\31\1\2\10\0\1\32\113\0"+
    "\2\4\1\0\1\4\1\33\11\4\1\34\33\4\5\0"+
    "\1\35\2\0\1\32\4\0\1\35\1\0\30\35\3\0"+
    "\2\36\1\0\1\36\1\0\11\36\1\37\33\36\13\0"+
    "\1\40\44\0\1\41\3\0\1\42\47\0\1\32\1\43"+
    "\1\0\1\40\46\0\1\32\10\0\1\44\40\0\1\32"+
    "\23\0\1\45\25\0\1\32\13\0\1\46\35\0\1\32"+
    "\26\0\1\47\22\0\1\32\13\0\1\50\35\0\1\32"+
    "\21\0\1\51\27\0\1\32\7\0\1\52\41\0\1\32"+
    "\7\0\1\53\41\0\1\32\30\0\1\54\20\0\1\32"+
    "\7\0\1\55\6\0\1\56\32\0\1\32\13\0\1\57"+
    "\35\0\1\32\13\0\1\60\25\0\1\32\4\0\1\32"+
    "\4\0\2\32\1\0\1\32\1\0\30\32\2\0\1\32"+
    "\2\4\1\0\47\4\1\35\4\0\1\35\5\0\1\35"+
    "\1\0\1\35\1\0\30\35\2\0\1\35\2\36\1\0"+
    "\47\36\11\0\1\43\1\0\1\40\36\0\2\41\2\0"+
    "\2\41\1\61\42\41\1\0\2\42\2\0\45\42\14\0"+
    "\1\62\76\0\1\63\43\0\1\64\44\0\1\65\44\0"+
    "\1\66\13\0\1\67\51\0\1\70\52\0\1\71\55\0"+
    "\1\72\50\0\1\73\51\0\1\74\43\0\1\75\37\0"+
    "\1\76\53\0\1\77\15\0\1\100\4\0\1\101\43\0"+
    "\1\102\12\0\2\41\2\0\2\41\1\61\3\41\1\103"+
    "\36\41\42\0\1\104\45\0\1\105\34\0\1\106\57\0"+
    "\1\107\55\0\1\110\51\0\1\111\53\0\1\112\41\0"+
    "\1\113\65\0\1\114\40\0\1\115\57\0\1\116\37\0"+
    "\1\117\13\0\1\120\41\0\1\121\62\0\1\122\52\0"+
    "\1\123\51\0\1\124\47\0\1\125\54\0\1\126\51\0"+
    "\1\127\41\0\1\130\43\0\1\131\64\0\1\132\51\0"+
    "\1\133\32\0\1\134\62\0\1\135\54\0\1\136\41\0"+
    "\1\137\60\0\1\140\42\0\1\141\67\0\1\142\33\0"+
    "\1\143\45\0\1\144\72\0\1\145\41\0\1\146\44\0"+
    "\1\147\66\0\1\150\51\0\1\151\40\0\1\152\44\0"+
    "\1\153\52\0\1\154\71\0\1\155\30\0\1\156\56\0"+
    "\1\157\52\0\1\160\57\0\1\161\57\0\1\162\26\0"+
    "\1\163\53\0\1\164\66\0\1\165\43\0\1\166\55\0"+
    "\1\167\32\0\1\170\55\0\1\171\64\0\1\172\31\0"+
    "\1\173\51\0\1\174\70\0\1\175\44\0\1\176\44\0"+
    "\1\177\44\0\1\200\73\0\1\201\27\0\1\202\51\0"+
    "\1\203\73\0\1\204\56\0\1\164\34\0\1\205\57\0"+
    "\1\206\31\0\1\207\54\0\1\210\14\0\1\211\47\0"+
    "\1\212\56\0\1\213\27\0\1\214\50\0\1\215\67\0"+
    "\1\216\51\0\1\217\51\0\1\220\33\0\1\221\51\0"+
    "\1\222\71\0\1\223\32\0\1\224\55\0\1\225\45\0"+
    "\1\226\55\0\1\227\66\0\1\230\50\0\1\231\1\0"+
    "\1\232\46\0\1\233\51\0\1\234\32\0\1\235\66\0"+
    "\1\236\54\0\1\237\35\0\1\240\65\0\1\241\33\0"+
    "\1\242\66\0\1\243\42\0\1\244\55\0\1\245\50\0"+
    "\1\246\52\0\1\247\51\0\1\250\54\0\1\251\51\0"+
    "\1\252\60\0\1\253\30\0\1\254\65\0\1\255\34\0"+
    "\1\256\45\0\1\257\65\0\1\260\57\0\1\261\37\0"+
    "\1\262\47\0\1\263\51\0\1\264\43\0\1\265\65\0"+
    "\1\266\55\0\1\267\35\0\1\270\55\0\1\271\53\0"+
    "\1\272\52\0\1\273\55\0\1\274\53\0\1\275\47\0"+
    "\1\276\51\0\1\277\44\0\1\300\45\0\1\301\64\0"+
    "\1\302\47\0\1\303\55\0\1\304\46\0\1\305\30\0"+
    "\1\306\54\0\1\307\47\0\1\310\51\0\1\311\71\0"+
    "\1\312\50\0\1\313\36\0\1\314\44\0\1\315\56\0"+
    "\1\316\44\0\1\317\55\0\1\320\3\0\1\321\46\0"+
    "\1\322\57\0\1\323\51\0\1\324\37\0\1\325\63\0"+
    "\1\326\51\0\1\327\56\0\1\330\51\0\1\331\46\0"+
    "\1\332\57\0\1\333\26\0\1\334\64\0\1\335\37\0"+
    "\1\336\50\0\1\337\56\0\1\340\57\0\1\341\50\0"+
    "\1\342\57\0\1\343\31\0\1\344\73\0\1\345\42\0"+
    "\1\346\44\0\1\347\44\0\1\350\62\0\1\164\44\0"+
    "\1\351\64\0\1\352\36\0\1\353\45\0\1\354\61\0"+
    "\1\355\46\0\1\356\50\0\1\357\64\0\1\360\53\0"+
    "\1\361\43\0\1\164\43\0\1\362\54\0\1\363\45\0"+
    "\1\364\45\0\1\365\70\0\1\366\43\0\1\367\50\0"+
    "\1\370\41\0\1\371\62\0\1\372\20\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9450];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\3\1\1\11\3\1\1\11\14\1"+
    "\2\11\1\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\17\0\1\1\20\0\1\1\4\0\1\11\3\0"+
    "\1\11\34\0\1\11\20\0\1\1\6\0\1\11\3\0"+
    "\1\11\21\0\1\11\24\0\1\11\20\0\1\11\7\0"+
    "\1\1\4\0\1\11\7\0\1\11\2\1\1\0\1\11"+
    "\6\0\1\1\11\0\1\11\6\0\1\11\3\0\1\11"+
    "\4\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _MaterialLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MaterialLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 34: break;
          case 2:
            { return STRING_LITERAL;
            }
          // fall through
          case 35: break;
          case 3:
            { return ASTERISK;
            }
          // fall through
          case 36: break;
          case 4:
            { return COMMA;
            }
          // fall through
          case 37: break;
          case 5:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 38: break;
          case 6:
            { return COLON;
            }
          // fall through
          case 39: break;
          case 7:
            { return LBRACE;
            }
          // fall through
          case 40: break;
          case 8:
            { return RBRACE;
            }
          // fall through
          case 41: break;
          case 9:
            { return IDENTIFIER;
            }
          // fall through
          case 42: break;
          case 10:
            { return VARIABLE;
            }
          // fall through
          case 43: break;
          case 11:
            { return MATCH_LITERAL;
            }
          // fall through
          case 44: break;
          case 12:
            { return LINE_COMMENT;
            }
          // fall through
          case 45: break;
          case 13:
            { return MULTILINE_COMMENT;
            }
          // fall through
          case 46: break;
          case 14:
            { return FROM;
            }
          // fall through
          case 47: break;
          case 15:
            { return PASS;
            }
          // fall through
          case 48: break;
          case 16:
            { return IMPORT;
            }
          // fall through
          case 49: break;
          case 17:
            { return SAMPLER;
            }
          // fall through
          case 50: break;
          case 18:
            { return ABSTRACT;
            }
          // fall through
          case 51: break;
          case 19:
            { return MATERIAL;
            }
          // fall through
          case 52: break;
          case 20:
            { return TECHNIQUE;
            }
          // fall through
          case 53: break;
          case 21:
            { return SAMPLER_REF;
            }
          // fall through
          case 54: break;
          case 22:
            { return TEXTURE_UNIT;
            }
          // fall through
          case 55: break;
          case 23:
            { return SHARED_PARAMS;
            }
          // fall through
          case 56: break;
          case 24:
            { return DEFAULT_PARAMS;
            }
          // fall through
          case 57: break;
          case 25:
            { return TEXTURE_SOURCE;
            }
          // fall through
          case 58: break;
          case 26:
            { return VERTEX_PROGRAM;
            }
          // fall through
          case 59: break;
          case 27:
            { return VERTEX_PROGRAM_REF;
            }
          // fall through
          case 60: break;
          case 28:
            { return RTSHADER_SYSTEM;
            }
          // fall through
          case 61: break;
          case 29:
            { return FRAGMENT_PROGRAM;
            }
          // fall through
          case 62: break;
          case 30:
            { return SHARED_PARAMS_REF;
            }
          // fall through
          case 63: break;
          case 31:
            { return FRAGMENT_PROGRAM_REF;
            }
          // fall through
          case 64: break;
          case 32:
            { return SHADOW_CASTER_MATERIAL;
            }
          // fall through
          case 65: break;
          case 33:
            { return SHADOW_RECEIVER_MATERIAL;
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
