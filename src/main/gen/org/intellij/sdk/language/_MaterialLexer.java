// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Material.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.ogre.scriptlsp.lang.MaterialTypes.*;


public class _MaterialLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\16\0\6\1\1\4"+
    "\1\1\1\5\5\1\1\6\2\1\1\7\1\10\1\11"+
    "\12\12\1\13\6\1\32\5\1\1\1\14\2\1\1\15"+
    "\1\1\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\5\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\5\1\42"+
    "\1\43\1\5\1\44\1\1\1\45\1\1\6\0\1\46"+
    "\32\0\2\1\4\5\4\1\1\5\2\1\1\0\7\1"+
    "\1\5\4\1\1\5\5\1\27\5\1\1\37\5\1\1"+
    "\u01ca\5\4\1\14\5\16\1\5\5\7\1\1\5\1\1"+
    "\1\5\21\1\160\0\5\5\1\1\2\5\2\1\4\5"+
    "\1\1\1\5\6\1\1\5\1\1\3\5\1\1\1\5"+
    "\1\1\24\5\1\1\123\5\1\1\213\5\1\1\5\0"+
    "\2\1\246\5\1\1\46\5\2\1\1\5\6\1\51\5"+
    "\6\1\1\5\1\1\55\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\10\1\33\5\4\1\4\5"+
    "\15\1\6\0\5\1\1\5\4\1\13\0\1\1\1\0"+
    "\3\1\53\5\25\0\12\12\4\1\2\5\1\0\143\5"+
    "\1\1\1\5\10\0\1\1\6\0\2\5\2\0\1\1"+
    "\4\0\2\5\12\12\3\5\2\1\1\5\17\1\1\0"+
    "\1\5\1\0\36\5\33\0\2\1\131\5\13\0\1\5"+
    "\16\1\12\12\41\5\11\0\2\5\4\1\1\5\2\1"+
    "\1\0\30\5\4\0\1\5\11\0\1\5\3\0\1\5"+
    "\5\0\22\1\31\5\3\0\4\1\13\5\65\1\25\5"+
    "\1\1\22\5\13\1\61\0\66\5\3\0\1\5\22\0"+
    "\1\5\7\0\12\5\2\0\2\1\12\12\1\1\20\5"+
    "\3\0\1\1\10\5\2\1\2\5\2\1\26\5\1\1"+
    "\7\5\1\1\1\5\3\1\4\5\2\1\1\0\1\5"+
    "\7\0\2\1\2\0\2\1\3\0\1\5\10\1\1\0"+
    "\4\1\2\5\1\1\3\5\2\0\2\1\12\12\4\5"+
    "\7\1\2\5\1\1\1\0\2\1\3\0\1\1\6\5"+
    "\4\1\2\5\2\1\26\5\1\1\7\5\1\1\2\5"+
    "\1\1\2\5\1\1\2\5\2\1\1\0\1\1\5\0"+
    "\4\1\2\0\2\1\3\0\3\1\1\0\7\1\4\5"+
    "\1\1\1\5\7\1\12\12\2\0\3\5\1\0\13\1"+
    "\3\0\1\1\11\5\1\1\3\5\1\1\26\5\1\1"+
    "\7\5\1\1\2\5\1\1\5\5\2\1\1\0\1\5"+
    "\10\0\1\1\3\0\1\1\3\0\2\1\1\5\17\1"+
    "\2\5\2\0\2\1\12\12\1\1\1\5\7\1\1\5"+
    "\6\0\1\1\3\0\1\1\10\5\2\1\2\5\2\1"+
    "\26\5\1\1\7\5\1\1\2\5\1\1\5\5\2\1"+
    "\1\0\1\5\7\0\2\1\2\0\2\1\3\0\7\1"+
    "\3\0\4\1\2\5\1\1\3\5\2\0\2\1\12\12"+
    "\1\1\1\5\20\1\1\0\1\5\1\1\6\5\3\1"+
    "\3\5\1\1\4\5\3\1\2\5\1\1\1\5\1\1"+
    "\2\5\3\1\2\5\3\1\3\5\3\1\14\5\4\1"+
    "\5\0\3\1\3\0\1\1\4\0\2\1\1\5\6\1"+
    "\1\0\16\1\12\12\11\1\1\5\6\1\5\0\10\5"+
    "\1\1\3\5\1\1\27\5\1\1\20\5\3\1\1\5"+
    "\7\0\1\1\3\0\1\1\4\0\7\1\2\0\1\1"+
    "\3\5\5\1\2\5\2\0\2\1\12\12\20\1\1\5"+
    "\3\0\1\1\10\5\1\1\3\5\1\1\27\5\1\1"+
    "\12\5\1\1\5\5\2\1\1\0\1\5\7\0\1\1"+
    "\3\0\1\1\4\0\7\1\2\0\7\1\1\5\1\1"+
    "\2\5\2\0\2\1\12\12\1\1\2\5\15\1\4\0"+
    "\11\5\1\1\3\5\1\1\51\5\2\0\1\5\7\0"+
    "\1\1\3\0\1\1\4\0\1\5\5\1\3\5\1\0"+
    "\7\1\3\5\2\0\2\1\12\12\12\1\6\5\1\1"+
    "\3\0\1\1\22\5\3\1\30\5\1\1\11\5\1\1"+
    "\1\5\2\1\7\5\3\1\1\0\4\1\6\0\1\1"+
    "\1\0\1\1\10\0\6\1\12\12\2\1\2\0\15\1"+
    "\60\5\1\0\2\5\7\0\4\1\10\5\10\0\1\1"+
    "\12\12\47\1\2\5\1\1\1\5\1\1\5\5\1\1"+
    "\30\5\1\1\1\5\1\1\12\5\1\0\2\5\11\0"+
    "\1\5\2\1\5\5\1\1\1\5\1\1\6\0\2\1"+
    "\12\12\2\1\4\5\40\1\1\5\27\1\2\0\6\1"+
    "\12\12\13\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\2\0\10\5\1\1\44\5\4\1\24\0\1\1\2\0"+
    "\5\5\13\0\1\1\44\0\11\1\1\0\71\1\53\5"+
    "\24\0\1\5\12\12\6\1\6\5\4\0\4\5\3\0"+
    "\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0"+
    "\1\5\1\0\12\12\4\0\2\1\46\5\1\1\1\5"+
    "\5\1\1\5\2\1\53\5\1\1\115\5\1\1\4\5"+
    "\2\1\7\5\1\1\1\5\1\1\4\5\2\1\51\5"+
    "\1\1\4\5\2\1\41\5\1\1\4\5\2\1\7\5"+
    "\1\1\1\5\1\1\4\5\2\1\17\5\1\1\71\5"+
    "\1\1\4\5\2\1\103\5\2\1\3\0\40\1\20\5"+
    "\20\1\126\5\2\1\6\5\3\1\u016c\5\2\1\21\5"+
    "\1\1\32\5\5\1\113\5\3\1\13\5\7\1\15\5"+
    "\1\1\4\5\3\0\13\1\22\5\3\0\13\1\22\5"+
    "\2\0\14\1\15\5\1\1\3\5\1\1\2\0\14\1"+
    "\64\5\40\0\3\1\1\5\3\1\2\5\1\0\2\1"+
    "\12\12\41\1\4\0\1\1\12\12\6\1\131\5\7\1"+
    "\5\5\2\0\42\5\1\0\1\5\5\1\106\5\12\1"+
    "\37\5\1\1\14\0\4\1\14\0\12\1\12\12\36\5"+
    "\2\1\5\5\13\1\54\5\4\1\32\5\6\1\12\12"+
    "\46\1\27\5\5\0\4\1\65\5\12\0\1\1\35\0"+
    "\2\1\1\0\12\12\6\1\12\12\15\1\1\5\10\1"+
    "\16\0\1\1\2\0\77\1\5\0\57\5\21\0\7\5"+
    "\4\1\12\12\21\1\11\0\14\1\3\0\36\5\15\0"+
    "\2\5\12\12\54\5\16\0\14\1\44\5\24\0\10\1"+
    "\12\12\3\1\3\5\12\12\44\5\2\1\11\5\7\1"+
    "\53\5\2\1\3\5\20\1\3\0\1\1\25\0\4\5"+
    "\1\0\6\5\1\0\2\5\3\0\1\5\5\1\300\5"+
    "\72\0\1\1\5\0\26\5\2\1\6\5\2\1\46\5"+
    "\2\1\6\5\2\1\10\5\1\1\1\5\1\1\1\5"+
    "\1\1\1\5\1\1\37\5\2\1\65\5\1\1\7\5"+
    "\1\1\1\5\3\1\3\5\1\1\7\5\3\1\4\5"+
    "\2\1\6\5\4\1\15\5\5\1\3\5\1\1\7\5"+
    "\16\1\5\0\30\1\2\3\5\0\20\1\2\5\23\1"+
    "\1\5\13\1\5\0\1\1\12\0\1\1\1\5\15\1"+
    "\1\5\20\1\15\5\3\1\40\5\20\1\15\0\4\1"+
    "\1\0\3\1\14\0\21\1\1\5\4\1\1\5\2\1"+
    "\12\5\1\1\1\5\3\1\5\5\6\1\1\5\1\1"+
    "\1\5\1\1\1\5\1\1\4\5\1\1\13\5\2\1"+
    "\4\5\5\1\5\5\4\1\1\5\21\1\51\5\u0177\1"+
    "\57\5\1\1\57\5\1\1\205\5\6\1\4\5\3\0"+
    "\2\5\14\1\46\5\1\1\1\5\5\1\1\5\2\1"+
    "\70\5\7\1\1\5\17\1\1\0\27\5\11\1\7\5"+
    "\1\1\7\5\1\1\7\5\1\1\7\5\1\1\7\5"+
    "\1\1\7\5\1\1\7\5\1\1\7\5\1\1\40\0"+
    "\57\1\1\5\325\1\3\5\31\1\11\5\6\0\1\1"+
    "\5\5\2\1\5\5\4\1\126\5\2\1\2\0\2\1"+
    "\3\5\1\1\132\5\1\1\4\5\5\1\53\5\1\1"+
    "\136\5\21\1\40\5\60\1\320\5\100\1\375\5\3\1"+
    "\215\5\103\1\56\5\2\1\15\5\3\1\20\5\12\12"+
    "\2\5\24\1\57\5\1\0\4\1\12\0\1\1\37\5"+
    "\2\0\120\5\2\0\45\1\11\5\2\1\147\5\2\1"+
    "\65\5\2\1\11\5\52\1\15\5\1\0\3\5\1\0"+
    "\4\5\1\0\27\5\5\0\4\1\1\0\13\1\1\5"+
    "\7\1\64\5\14\1\2\0\62\5\22\0\12\1\12\12"+
    "\6\1\22\0\6\5\3\1\1\5\1\1\2\5\1\0"+
    "\12\12\34\5\10\0\2\1\27\5\15\0\14\1\35\5"+
    "\3\1\4\0\57\5\16\0\16\1\1\5\12\12\6\1"+
    "\5\5\1\0\12\5\12\12\5\5\1\1\51\5\16\0"+
    "\11\1\3\5\1\0\10\5\2\0\2\1\12\12\6\1"+
    "\27\5\3\1\1\5\3\0\62\5\1\0\1\5\3\0"+
    "\2\5\2\0\5\5\2\0\1\5\1\0\1\5\30\1"+
    "\3\5\2\1\13\5\5\0\2\1\3\5\2\0\12\1"+
    "\6\5\2\1\6\5\2\1\6\5\11\1\7\5\1\1"+
    "\7\5\1\1\53\5\1\1\16\5\6\1\163\5\10\0"+
    "\1\1\2\0\2\1\12\12\6\1\244\5\14\1\27\5"+
    "\4\1\61\5\4\1\u0100\3\156\5\2\1\152\5\46\1"+
    "\7\5\14\1\5\5\5\1\1\5\1\0\12\5\1\1"+
    "\15\5\1\1\5\5\1\1\1\5\1\1\2\5\1\1"+
    "\2\5\1\1\154\5\41\1\153\5\22\1\100\5\2\1"+
    "\66\5\50\1\15\5\3\1\20\0\20\1\20\0\3\1"+
    "\2\5\30\1\3\5\31\1\1\5\6\1\5\5\1\1"+
    "\207\5\2\1\1\0\4\1\1\5\13\1\12\12\7\1"+
    "\32\5\4\1\1\5\1\1\32\5\13\1\131\5\3\1"+
    "\6\5\2\1\6\5\2\1\6\5\2\1\3\5\3\1"+
    "\2\5\3\1\2\5\22\1\3\0\4\1\14\5\1\1"+
    "\32\5\1\1\23\5\1\1\2\5\1\1\17\5\2\1"+
    "\16\5\42\1\173\5\105\1\65\5\210\1\1\0\202\1"+
    "\35\5\3\1\61\5\17\1\1\0\37\1\40\5\15\1"+
    "\36\5\5\1\46\5\5\0\5\1\36\5\2\1\44\5"+
    "\4\1\10\5\1\1\5\5\52\1\236\5\2\1\12\12"+
    "\6\1\44\5\4\1\44\5\4\1\50\5\10\1\64\5"+
    "\234\1\67\5\11\1\26\5\12\1\10\5\230\1\6\5"+
    "\2\1\1\5\1\1\54\5\1\1\2\5\3\1\1\5"+
    "\2\1\27\5\12\1\27\5\11\1\37\5\101\1\23\5"+
    "\1\1\2\5\12\1\26\5\12\1\32\5\106\1\70\5"+
    "\6\1\2\5\100\1\1\5\3\0\1\1\2\0\5\1"+
    "\4\0\4\5\1\1\3\5\1\1\35\5\2\1\3\0"+
    "\4\1\1\0\40\1\35\5\3\1\35\5\43\1\10\5"+
    "\1\1\34\5\2\0\31\1\66\5\12\1\26\5\12\1"+
    "\23\5\15\1\22\5\156\1\111\5\67\1\63\5\15\1"+
    "\63\5\15\1\44\5\4\0\10\1\12\12\u0146\1\52\5"+
    "\1\1\2\0\3\1\2\5\116\1\35\5\12\1\1\5"+
    "\10\1\26\5\13\0\137\1\25\5\33\1\27\5\11\1"+
    "\3\0\65\5\17\0\37\1\12\12\17\1\4\0\55\5"+
    "\13\0\2\1\1\0\17\1\1\0\2\1\31\5\7\1"+
    "\12\12\6\1\3\0\44\5\16\0\1\1\12\12\4\1"+
    "\1\5\2\0\1\5\10\1\43\5\1\0\2\1\1\5"+
    "\11\1\3\0\60\5\16\0\4\5\4\1\4\0\1\1"+
    "\2\0\12\12\1\5\1\1\1\5\43\1\22\5\1\1"+
    "\31\5\14\0\6\1\1\0\101\1\7\5\1\1\1\5"+
    "\1\1\4\5\1\1\17\5\1\1\12\5\7\1\57\5"+
    "\14\0\5\1\12\12\6\1\4\0\1\1\10\5\2\1"+
    "\2\5\2\1\26\5\1\1\7\5\1\1\2\5\1\1"+
    "\5\5\1\1\2\0\1\5\7\0\2\1\2\0\2\1"+
    "\3\0\2\1\1\5\6\1\1\0\5\1\5\5\2\0"+
    "\2\1\7\0\3\1\5\0\213\1\65\5\22\0\4\5"+
    "\5\1\12\12\4\1\1\0\3\5\36\1\60\5\24\0"+
    "\2\5\1\1\1\5\10\1\12\12\246\1\57\5\7\0"+
    "\2\1\11\0\27\1\4\5\2\0\42\1\60\5\21\0"+
    "\3\1\1\5\13\1\12\12\46\1\53\5\15\0\1\5"+
    "\7\1\12\12\66\1\33\5\2\1\17\0\4\1\12\12"+
    "\306\1\54\5\17\0\145\1\100\5\12\12\25\1\10\5"+
    "\2\1\1\5\2\1\10\5\1\1\2\5\1\1\30\5"+
    "\6\0\1\1\2\0\2\1\4\0\1\5\1\0\1\5"+
    "\2\0\14\1\12\0\106\1\10\5\2\1\47\5\7\0"+
    "\2\1\7\0\1\5\1\1\1\5\1\0\33\1\1\5"+
    "\12\0\50\5\7\0\1\5\4\0\10\1\1\0\10\1"+
    "\1\5\13\0\56\5\20\0\3\1\1\5\42\1\71\5"+
    "\7\1\11\5\1\1\45\5\10\0\1\1\10\0\1\5"+
    "\17\1\12\12\30\1\36\5\2\1\26\0\1\1\16\0"+
    "\111\1\7\5\1\1\2\5\1\1\46\5\6\0\3\1"+
    "\1\0\1\1\2\0\1\1\7\0\1\5\1\0\10\1"+
    "\12\12\6\1\6\5\1\1\2\5\1\1\40\5\5\0"+
    "\1\1\2\0\1\1\5\0\1\5\7\1\12\12\u0136\1"+
    "\23\5\4\0\271\1\1\5\54\1\4\5\37\1\232\5"+
    "\146\1\157\5\21\1\304\5\274\1\57\5\1\1\11\0"+
    "\307\1\107\5\271\1\71\5\7\1\37\5\1\1\12\12"+
    "\146\1\36\5\2\1\5\0\13\1\60\5\7\0\11\1"+
    "\4\5\14\1\12\12\11\1\25\5\5\1\23\5\260\1"+
    "\100\5\200\1\113\5\4\1\1\0\1\5\67\0\7\1"+
    "\4\0\15\5\100\1\2\5\1\1\1\5\1\0\13\1"+
    "\2\0\16\1\370\5\10\1\326\5\52\1\11\5\367\1"+
    "\37\5\61\1\3\5\21\1\4\5\10\1\u018c\5\4\1"+
    "\153\5\5\1\15\5\3\1\11\5\7\1\12\5\3\1"+
    "\2\0\1\1\4\0\301\1\5\0\3\1\26\0\2\1"+
    "\7\0\36\1\4\0\224\1\3\0\273\1\125\5\1\1"+
    "\107\5\1\1\2\5\2\1\1\5\2\1\2\5\2\1"+
    "\4\5\1\1\14\5\1\1\1\5\1\1\7\5\1\1"+
    "\101\5\1\1\4\5\2\1\10\5\1\1\7\5\1\1"+
    "\34\5\1\1\4\5\1\1\5\5\1\1\1\5\3\1"+
    "\7\5\1\1\u0154\5\2\1\31\5\1\1\31\5\1\1"+
    "\37\5\1\1\31\5\1\1\37\5\1\1\31\5\1\1"+
    "\37\5\1\1\31\5\1\1\37\5\1\1\31\5\1\1"+
    "\10\5\2\1\62\12\67\0\4\1\62\0\10\1\1\0"+
    "\16\1\1\0\26\1\5\0\1\1\17\0\120\1\7\0"+
    "\1\1\21\0\2\1\7\0\1\1\2\0\1\1\5\0"+
    "\325\1\55\5\3\1\7\0\7\5\2\1\12\12\4\1"+
    "\1\5\u0171\1\54\5\4\0\12\12\5\1\306\5\13\1"+
    "\7\0\51\1\104\5\7\0\1\5\4\1\12\12\u0156\1"+
    "\1\5\117\1\4\5\1\1\33\5\1\1\2\5\1\1"+
    "\1\5\2\1\1\5\1\1\12\5\1\1\4\5\1\1"+
    "\1\5\1\1\1\5\6\1\1\5\4\1\1\5\1\1"+
    "\1\5\1\1\1\5\1\1\3\5\1\1\2\5\1\1"+
    "\1\5\2\1\1\5\1\1\1\5\1\1\1\5\1\1"+
    "\1\5\1\1\1\5\1\1\2\5\1\1\1\5\2\1"+
    "\4\5\1\1\7\5\1\1\4\5\1\1\4\5\1\1"+
    "\1\5\1\1\12\5\1\1\21\5\5\1\3\5\1\1"+
    "\5\5\1\1\21\5\u0134\1\12\0\6\1\336\5\42\1"+
    "\65\5\13\1\336\5\2\1\u0182\5\16\1\u0131\5\37\1"+
    "\36\5\342\1\113\5\266\1\1\0\36\1\140\0\200\1"+
    "\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\11\3\1\7\1\10\1\2\2\0\1\11\1\0\12\3"+
    "\1\5\21\3\1\12\22\3\1\13\16\3\1\14\3\3"+
    "\1\15\1\16\6\3\1\17\10\3\1\20\5\3\1\21"+
    "\4\3\1\22\1\3\1\23\2\3\1\24\4\3\1\25"+
    "\1\3\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\47\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\47\0\47\0\47\0\u0297\0\u02be\0\u02e5"+
    "\0\u030c\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d"+
    "\0\u0444\0\u046b\0\u0492\0\u030c\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\165\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\165\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\165"+
    "\0\u0c30\0\u0c57\0\u0c7e\0\165\0\165\0\u0ca5\0\u0ccc\0\u0cf3"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\165\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\165\0\u0ec7\0\u0eee\0\u0f15"+
    "\0\u0f3c\0\u0f63\0\165\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\165"+
    "\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137"+
    "\0\u115e\0\165\0\u1185\0\165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\2\1\4\1\12\2\4\1\13\1\14\1\15"+
    "\2\4\1\16\1\4\1\17\2\4\1\20\3\4\1\21"+
    "\1\4\1\22\2\4\1\23\1\24\1\2\47\0\2\3"+
    "\1\0\1\3\1\25\7\3\1\26\32\3\1\4\4\0"+
    "\1\4\3\0\2\4\2\0\27\4\2\0\1\4\2\5"+
    "\1\0\1\5\1\0\7\5\1\27\32\5\12\0\1\10"+
    "\45\0\1\30\45\0\1\31\1\0\1\10\34\0\1\4"+
    "\4\0\1\4\3\0\2\4\2\0\2\4\1\32\24\4"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\5\4"+
    "\1\33\21\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\14\4\1\34\12\4\2\0\2\4\4\0\1\4"+
    "\3\0\2\4\2\0\20\4\1\35\6\4\2\0\2\4"+
    "\4\0\1\4\3\0\2\4\2\0\13\4\1\36\13\4"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\1\4"+
    "\1\37\25\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\1\4\1\40\16\4\1\41\6\4\2\0\2\4"+
    "\4\0\1\4\3\0\2\4\2\0\5\4\1\42\21\4"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\5\4"+
    "\1\43\21\4\2\0\1\4\2\3\1\0\44\3\2\5"+
    "\1\0\44\5\2\30\2\0\42\30\13\0\1\44\34\0"+
    "\1\4\4\0\1\4\3\0\2\4\2\0\21\4\1\45"+
    "\5\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\6\4\1\46\20\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\22\4\1\47\4\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\1\4\1\50\25\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\16\4\1\51"+
    "\10\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\22\4\1\52\4\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\21\4\1\53\5\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\15\4\1\54\11\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\3\4\1\55"+
    "\21\4\1\56\1\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\20\4\1\57\6\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\22\4\1\60\4\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\1\4\1\61"+
    "\25\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\20\4\1\62\6\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\7\4\1\63\17\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\15\4\1\64\11\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\5\4\1\65"+
    "\21\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\21\4\1\66\5\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\6\4\1\67\20\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\10\4\1\70\16\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\22\4\1\71"+
    "\4\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\22\4\1\72\4\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\20\4\1\73\6\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\23\4\1\74\3\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\26\4\1\75"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\13\4"+
    "\1\76\13\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\20\4\1\77\6\4\2\0\2\4\4\0\1\4"+
    "\3\0\2\4\2\0\20\4\1\100\6\4\2\0\2\4"+
    "\4\0\1\4\3\0\2\4\2\0\11\4\1\101\15\4"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\14\4"+
    "\1\102\12\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\23\4\1\103\3\4\2\0\2\4\4\0\1\4"+
    "\3\0\2\4\2\0\5\4\1\104\21\4\2\0\2\4"+
    "\4\0\1\4\3\0\2\4\2\0\1\4\1\105\25\4"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\12\4"+
    "\1\106\14\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\1\107\26\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\5\4\1\110\21\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\22\4\1\111\4\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\11\4\1\112"+
    "\15\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\12\4\1\113\14\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\11\4\1\114\15\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\20\4\1\115\6\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\25\4\1\116"+
    "\1\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\3\4\1\117\23\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\22\4\1\120\4\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\16\4\1\121\10\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\14\4\1\122"+
    "\12\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\1\4\1\123\25\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\5\4\1\124\21\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\17\4\1\125\7\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\5\4\1\126"+
    "\21\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\1\127\26\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\22\4\1\130\4\4\2\0\2\4\4\0\1\4"+
    "\3\0\2\4\2\0\1\131\26\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\15\4\1\132\11\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\22\4\1\133"+
    "\4\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\12\4\1\134\14\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\21\4\1\135\5\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\23\4\1\136\3\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\1\137\26\4"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\16\4"+
    "\1\140\10\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\16\4\1\141\10\4\2\0\2\4\4\0\1\4"+
    "\3\0\2\4\2\0\11\4\1\142\15\4\2\0\2\4"+
    "\4\0\1\4\3\0\2\4\2\0\1\143\26\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\5\4\1\144"+
    "\21\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\23\4\1\145\3\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\20\4\1\146\6\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\1\4\1\147\25\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\14\4\1\150"+
    "\12\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\16\4\1\151\10\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\14\4\1\152\12\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\15\4\1\153\11\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\20\4\1\154"+
    "\6\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\22\4\1\155\4\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\20\4\1\156\6\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\11\4\1\157\15\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\7\4\1\160"+
    "\17\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\1\4\1\161\25\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\15\4\1\162\11\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\22\4\1\163\4\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\20\4\1\164"+
    "\6\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\13\4\1\165\13\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\7\4\1\166\17\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\1\4\1\167\25\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\21\4\1\170"+
    "\5\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\20\4\1\171\6\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\13\4\1\172\13\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\1\4\1\173\25\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\1\174\26\4"+
    "\2\0\2\4\4\0\1\4\3\0\2\4\2\0\13\4"+
    "\1\175\13\4\2\0\2\4\4\0\1\4\3\0\2\4"+
    "\2\0\20\4\1\176\6\4\2\0\2\4\4\0\1\4"+
    "\3\0\2\4\2\0\1\177\26\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\5\4\1\200\21\4\2\0"+
    "\2\4\4\0\1\4\3\0\2\4\2\0\20\4\1\201"+
    "\6\4\2\0\2\4\4\0\1\4\3\0\2\4\2\0"+
    "\6\4\1\202\20\4\2\0\2\4\4\0\1\4\3\0"+
    "\2\4\2\0\5\4\1\203\21\4\2\0\2\4\4\0"+
    "\1\4\3\0\2\4\2\0\6\4\1\204\20\4\2\0"+
    "\1\4";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4524];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\11\1\3\11\2\0\1\1"+
    "\1\0\153\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _MaterialLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MaterialLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 23: break;
          case 2:
            { return STRING_LITERAL;
            }
          // fall through
          case 24: break;
          case 3:
            { return IDENTIFIER;
            }
          // fall through
          case 25: break;
          case 4:
            { return MATCH_LITERAL;
            }
          // fall through
          case 26: break;
          case 5:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 27: break;
          case 6:
            { return COLON;
            }
          // fall through
          case 28: break;
          case 7:
            { return LBRACE;
            }
          // fall through
          case 29: break;
          case 8:
            { return RBRACE;
            }
          // fall through
          case 30: break;
          case 9:
            { return LINE_COMMENT;
            }
          // fall through
          case 31: break;
          case 10:
            { return PASS;
            }
          // fall through
          case 32: break;
          case 11:
            { return IMPORT;
            }
          // fall through
          case 33: break;
          case 12:
            { return ABSTRACT;
            }
          // fall through
          case 34: break;
          case 13:
            { return MATERIAL;
            }
          // fall through
          case 35: break;
          case 14:
            { return PROFILES;
            }
          // fall through
          case 36: break;
          case 15:
            { return TECHNIQUE;
            }
          // fall through
          case 37: break;
          case 16:
            { return ENTRY_POINT;
            }
          // fall through
          case 38: break;
          case 17:
            { return TEXTURE_UNIT;
            }
          // fall through
          case 39: break;
          case 18:
            { return DEFAULT_PARAMS;
            }
          // fall through
          case 40: break;
          case 19:
            { return VERTEX_PROGRAM;
            }
          // fall through
          case 41: break;
          case 20:
            { return FRAGMENT_PROGRAM;
            }
          // fall through
          case 42: break;
          case 21:
            { return VERTEX_PROGRAM_REF;
            }
          // fall through
          case 43: break;
          case 22:
            { return FRAGMENT_PROGRAM_REF;
            }
          // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
